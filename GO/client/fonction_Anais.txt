func sendInt(conn net.Conn, value int) error {
	// Convertir l'entier en bytes
	buffer := make([]byte, 4) // Un int32 nécessite 4 octets
	binary.BigEndian.PutUint32(buffer, uint32(value))

	// Envoyer d'abord la taille des données
	sizeBuffer := make([]byte, 4)
	binary.BigEndian.PutUint32(sizeBuffer, uint32(len(buffer)))

	_, err := conn.Write(sizeBuffer)
	if err != nil {
		return fmt.Errorf("erreur lors de l'envoi de la taille : %v", err)
	}

	// Envoyer les données au serveur
	_, err = conn.Write(buffer)
	if err != nil {
		return fmt.Errorf("erreur lors de l'envoi des données : %v", err)
	}

	// Lire la confirmation du serveur
	confirmationBuffer := make([]byte, 1024)
	n, err := conn.Read(confirmationBuffer)
	if err != nil {
		return fmt.Errorf("erreur lors de la lecture de la confirmation : %v", err)
	}
	fmt.Println("Confirmation du serveur :", string(confirmationBuffer[:n]))

	return nil
}
---------------------------------------------------------------------------------------
	// --- Envoie des données pour générer la grille ---
	// err = sendInt(conn, prompt_data.dim_x)
	// if err != nil {
	// 	fmt.Println(err)
	// 	return
	// }
---------------------------------------------------------------------------------------
func receiveInt(conn net.Conn) (int, error) {
	// Lire la taille des données
	sizeBuffer := make([]byte, 4)
	_, err := conn.Read(sizeBuffer)
	if err != nil {
		return 0, fmt.Errorf("erreur lors de la lecture de la taille : %v", err)
	}
	size := binary.BigEndian.Uint32(sizeBuffer)

	// Lire les données
	dataBuffer := make([]byte, size)
	_, err = conn.Read(dataBuffer)
	if err != nil {
		return 0, fmt.Errorf("erreur lors de la lecture des données : %v", err)
	}

	// Convertir les bytes en entier
	value := int(binary.BigEndian.Uint32(dataBuffer))

	// Envoyer une confirmation au client
	confirmationMessage := fmt.Sprintf("Entier reçu : %d", value)
	_, err = conn.Write([]byte(confirmationMessage))
	if err != nil {
		return 0, fmt.Errorf("erreur lors de l'envoi de la confirmation : %v", err)
	}

	return value, nil
}
---------------------------------------------------------------------------------------
	// Largeur, err := receiveInt(conn)
	// if err != nil {
	// 	fmt.Println("Erreur de réception de la largeur :", err)
	// 	return
	// }